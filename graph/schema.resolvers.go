package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.76

import (
	"context"
	"errors"
	"os"

	"github.com/andrewjamesmoore/andrew-projects-api/database"
	"github.com/andrewjamesmoore/andrew-projects-api/graph/model"
	"github.com/andrewjamesmoore/andrew-projects-api/middleware"
	"go.mongodb.org/mongo-driver/bson"
	"go.mongodb.org/mongo-driver/bson/primitive"
)

// CreateProject is the resolver for the createProject field.
func (r *mutationResolver) CreateProject(ctx context.Context, input model.NewProject) (*model.Project, error) {
	if middleware.GetSecretKey(ctx) != os.Getenv("SECRET_KEY") {
		return nil, errors.New("unauthorized")
	}

	project := database.DBProject{
		Title:       input.Title,
		Description: input.Description,
		Status:      input.Status,
		Link:        input.Link,
		URL:         input.URL,
		Giturl:      input.Giturl,
		Tags:        input.Tags,
	}

	collection := r.DB.Client.Database(os.Getenv("MONGO_DB")).Collection("projects")
	result, err := collection.InsertOne(ctx, project)
	if err != nil {
		return nil, err
	}

	insertedID := result.InsertedID.(primitive.ObjectID)
	project.ID = insertedID

	return database.ConvertToGraphQL(&project), nil
}

// Project is the resolver for the project field.
func (r *queryResolver) Project(ctx context.Context, id string) (*model.Project, error) {
	objID, err := primitive.ObjectIDFromHex(id)
	if err != nil {
		return nil, err
	}

	var dbProject database.DBProject
	collection := r.DB.Client.Database("andrew_sh").Collection("projects")

	err = collection.FindOne(ctx, bson.M{"_id": objID}).Decode(&dbProject)
	if err != nil {
		return nil, err
	}

	return database.ConvertToGraphQL(&dbProject), nil
}

// Mutation returns MutationResolver implementation.
func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
